@page "/LocalStorage"
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div style="height: 75px; border-bottom: 2px solid black; display: flex; justify-content: center; align-items: center; background-color: #f8f9fa;">
    <a href="" style="text-decoration: none; color: black; font-size: 1.5em; padding: 10px; margin-right: 20px;">Home</a>
    <a href="counter" style="text-decoration: none; color: black; font-size: 1.5em; padding: 10px; margin-right: 20px;">Counter</a>
    <a href="calculator" style="text-decoration: none; color: black; font-size: 1.5em; padding: 10px; margin-right: 20px;">Calculator</a>
    <a href="LocalStorage" style="text-decoration: none; color: black; font-size: 1.5em; padding: 10px; margin-right: 20px;">Local Storage</a>
</div>

<style>
    .user-entry-container {margin-bottom: 20px;}

    label {display: block;margin-bottom: 5px;}

    input {width: 100%;padding: 8px;margin-bottom: 10px;box-sizing: border-box;}

    button {background-color: #007bff;color: #fff;padding: 10px 15px;border: none;cursor: pointer;font-size: 16px;margin-right: 10px;}

    button:hover {background-color: #0000b3;}

    .stored-data {margin-top: 20px;}

    ul {list-style-type: none;padding: 0;}

    li {margin-bottom: 5px;}

</style>

<div class="user-entry-container">
    <h3>User Data Entry</h3>
    <div>
        <label for="userName">User Name:</label>
        <input type="text" id="userName" @bind="userData.UserName" />
    </div>
    <button @onclick="SendData">Send Data</button>
    <button @onclick="RetrieveData">Retrieve Data</button>
</div>

<div class="stored-data">
    <h4>Stored User Data</h4>
    <ul>
        @foreach (var entry in userEntries)
        {
            <li>@entry</li>
        }
    </ul>
</div>

<script>
    window.localStorageFunction = {
        storeData: function (key, data) {
            // Retrieve existing data from local storage
            var existingData = localStorage.getItem(key);

            // Parse existing data as JSON or initialize an empty array
            var dataArray = existingData ? JSON.parse(existingData) : [];

            // Add the new data to the array
            dataArray.push(data);

            // Save the updated array back to local storage
            localStorage.setItem(key, JSON.stringify(dataArray));
        },
        retrieveData: function (key) {
            // Retrieve data from local storage
            var existingData = localStorage.getItem(key);

            // Parse data as JSON or return an empty array if no data found
            return existingData ? JSON.parse(existingData) : [];
        }
    };
</script>

@code {
    UserData userData = new UserData();
    List<string> userEntries = new List<string>(); 

    async Task SendData()
    {
        var sentUserName = userData.UserName;

        // Store data in local storage using JavaScript interop
        await JSRuntime.InvokeVoidAsync("localStorageFunction.storeData", "userName", sentUserName);

        // Log messages to the browser console
        await JSRuntime.InvokeVoidAsync("console.log", "Sending user Entry:", sentUserName);

        // Trigger re-render to update the UI
        StateHasChanged();
    }

    async Task RetrieveData()
    {
        // Retrieve data from local storage using JavaScript interop
        var retrievedUserNames = await JSRuntime.InvokeAsync<string[]>("localStorageFunction.retrieveData", "userName");

        // Log messages to the browser console
        await JSRuntime.InvokeVoidAsync("console.log", "Retrieving user Entries:", retrievedUserNames);

        // Clear the existing entries
        userEntries.Clear();

        // Add the retrieved user data to the list
        userEntries.AddRange(retrievedUserNames);

        // Clear the input after retrieving data
        userData = new UserData();

        // Trigger re-render to update the UI
        StateHasChanged();
    }
}